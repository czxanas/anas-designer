---
import Layout from '../layouts/Layout.astro';

const seo = {
    // title: 'Astro Boilerplate - Home',
    // description: 'A minimal and powerful Astro boilerplate for fast web development.',
    // social: {
    //     facebook: {
    //         title: 'Astro Boilerplate - Facebook',
    //         description: 'A minimal starter built with Astro. Fast, clean and scalable.',
    //         image: {
    //             url: '/cover-home.jpg' // You can change this path if you have a different image
    //         }
    //     },
    //     twitter: {
    //         creator: '@anas_dev',
    //         title: 'Astro Boilerplate - Twitter',
    //         description: 'Start fast with this clean Astro boilerplate.',
    //         image: {
    //             url: '/cover-home.jpg'
    //         }
    //     }
    // },
    // advanced: {
    //     robots: ['index', 'follow'],
    //     canonical: 'https://yourdomain.com/' // replace with your real domain
    // }
};

const images = [
    { src: '/images/darkone.webp', rotate: 8 },
    { src: '/images/orangeone.webp', rotate: 8 },
    { src: '/images/softone.webp', rotate: 4 },
    { src: '/images/gifone.gif', rotate: 0 }
];
---

<Layout title="Home" seo={seo}>
    <section class="container max-w-lg">
        <div class="mt-20"></div>
        <!--  -->
        <div class="relative w-full aspect-10/4 bg-black rounded-3xl">
            <div
                class="absolute bottom-0 translate-y-1/2 translate-x-3/10 w-30 aspect-square rounded-full bg-black border-4 border-white"
            >
                <div
                    class="absolute bottom-0 right-0 w-8 aspect-square rounded-full bg-orange-500 border-2 border-white"
                >
                </div>
            </div>
        </div>
        <!--  -->
        <div class="mt-30"></div>
        <!--  -->
        <section class="flex flex-col gap-4">
            <div class="font-semibold">Story</div>
            <p class="flex flex-col gap-2 text-black/60">
                <span
                    >I've always been that curious, creative kid. At 10, I was drawing for fun and
                    even selling my sketches to friends at school.</span
                >
                <span
                    >That love for making things never stopped. In 2019, I stumbled into code, and
                    something just clicked. It felt right, like I'd finally found my place.</span
                >
                <span
                    >Today, I craft human-centered digital experiences that are smooth, interactive,
                    and made to connect with people in meaningful ways.</span
                >
                <span>Still that same kid, just with pixels instead of pencils.</span>
            </p>
        </section>
        <!--  -->
        <div class="mt-10"></div>
        <!--  -->
        <section class="flex flex-col gap-4">
            <div class="font-semibold">Now</div>
            <p class="flex flex-col gap-2 text-black/60">
                <span
                    >Right now, I'm learning more about code and design to push my frontend work
                    even further.</span
                >
                <span
                    >I'm always experimenting, testing animations, building new features, and
                    staying curious.</span
                >
                <span
                    >The job title I love using is: <span
                        class="text-black border border-black/50 rounded py-0.25 px-1"
                        >UX Engineer</span
                    >. Open to opportunities, collaborations, or just a good conversation.</span
                >
            </p>
        </section>
        <!--  -->
        <div class="mt-16"></div>
        <!--  -->
        <section class="flex items-center gap-10">
            <div id="box" class="relative w-2/10 min-w-25 aspect-8/10">
                {
                    images.map(({ src, rotate }, i) => (
                        <img
                            class={`absolute top-0 left-0 w-full h-full object-cover rounded-xl rotatee-${rotate}`}
                            data-rotate={rotate}
                            data-img={images.length - i}
                            src={src}
                            alt=""
                        />
                    ))
                }
            </div>
            <!--  -->
            <p class="flex flex-col">
                <span>ðŸ”¬ Go check my latest</span>
                <span class="text-black/60">experiments, imaginations and more.</span>
            </p>
        </section>
        <!--  -->
        <div class="mt-16"></div>
        <!--  -->
        <section class="flex flex-col gap-4">
            <div class="font-semibold">Projects</div>
            <div class="w-full aspect-video rounded-3xl bg-black"></div>
        </section>
        <!--  -->
    </section>
    <!--  -->
    <div class="mb-50"></div>
</Layout>

<script>
    import gsap from 'gsap';
    import { Draggable } from 'gsap/Draggable';
    gsap.registerPlugin(Draggable);

    const box = document.getElementById('box') as HTMLElement;
    let images = gsap.utils.toArray('img').reverse() as HTMLImageElement[];

    function getElementCenter(el: HTMLElement): { x: number; y: number } {
        const rect = el.getBoundingClientRect();

        return {
            x: rect.left + rect.width / 2,
            y: rect.top + rect.height / 2
        };
    }

    let Z_INDEX = 0;
    let ROTATE_MAX = null as number | null;
    images.forEach((img) => {
        const rotateAttr = img.dataset.rotate;
        if (!rotateAttr) return;
        if (ROTATE_MAX === null || Number(rotateAttr) > ROTATE_MAX) ROTATE_MAX = Number(rotateAttr);
    });
    console.log(ROTATE_MAX);
    const boxPosition = getElementCenter(box);
    gsap.set('section', { perspective: 400 });

    images.forEach((img, i) => {
        gsap.to(img, { rotate: i * 4, scale: 1 - i / 10, xPercent: i * 8, duration: 0.5 });
    });

    Draggable.create('img', {
        onDrag: function () {
            const targetPos = getElementCenter(this.target);
            const differenceX = (targetPos.x - boxPosition.x) / 3;
            const differenceY = (targetPos.y - boxPosition.y) / -3;
            gsap.to(this.target, {
                rotateX: differenceY >= 0 ? Math.min(60, differenceY) : Math.max(-60, differenceY),
                rotateY: differenceX >= 0 ? Math.min(60, differenceX) : Math.max(-60, differenceX),
                duration: 0.15
            });
        },

        onDragEnd: function () {
            gsap.to(this.target, {
                x: 0,
                y: 0,
                rotateX: 0,
                rotateY: 0,
                duration: 0.2,
                onStart: () => {
                    const boxRefPoint = box.getBoundingClientRect();
                    const targetPoint = getElementCenter(this.target);
                    if (
                        boxRefPoint.right < targetPoint.x ||
                        boxRefPoint.left > targetPoint.x ||
                        boxRefPoint.top > targetPoint.y ||
                        boxRefPoint.bottom < targetPoint.y
                    ) {
                        Z_INDEX--;
                        gsap.set(this.target, { zIndex: Z_INDEX });
                        gsap.to(this.target, {
                            rotate: ROTATE_MAX ? ROTATE_MAX : 0,
                            scale: 1 - (images.length - 1) / 10,
                            xPercent: (images.length - 1) * 8,
                            duration: 0.2
                        });
                        images.shift();
                        images.forEach((img, i) => {
                            gsap.to(img, {
                                rotate: i * 4,
                                scale: 1 - i / 10,
                                xPercent: i * 8,
                                duration: 0.2
                            });
                        });
                        images.push(this.target);
                    }
                }
            });
        }
    });
</script>

<style>
    /* My sauce is to add perspective to have that 3d effect when rotate the image */
    #box {
        perspective: 200px;
        /* -webkit-perspective: 400px; */
        /* transform-style: preserve-3d;
        -webkit-transform-style: preserve-3d; */
    }
</style>
